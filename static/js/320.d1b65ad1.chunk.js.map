{"version":3,"file":"static/js/320.d1b65ad1.chunk.js","mappings":"qNAoFA,EAhFoB,WACd,IAAAA,GAAsCC,EAAAA,EAAAA,UAAS,CAC7C,CAAEC,OAAQ,MAAOC,QAAS,mCAC1BC,GAAAC,EAAAA,EAAAA,GAAAL,EAAA,GAFKM,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAGlCI,GAAsCP,EAAAA,EAAAA,UAAS,IAAGQ,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA3CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAO5BG,EAAiB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAC,IAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACb,GAAnBL,EAAEM,iBACyB,KAAvBd,EAAYe,OAAa,CAAAJ,EAAAE,KAAA,QAO3B,OALAhB,GAAe,SAACmB,GAAe,SAAAC,QAAAC,EAAAA,EAAAA,GAC1BF,GAAe,CAClB,CAAExB,OAAQ,OAAQC,QAASO,IAAa,IAG1CW,EAAAE,KAAA,EAC0BM,EAAenB,GAAa,KAAD,EAA/CS,EAAWE,EAAAS,KAGjBvB,GAAe,SAACmB,GAAe,SAAAC,QAAAC,EAAAA,EAAAA,GAC1BF,GAAe,CAClB,CAAExB,OAAQ,MAAOC,QAASgB,IAAa,IAIzCR,EAAe,IAAI,wBAAAU,EAAAU,OAAA,GAAAd,EAAA,KAEtB,gBArBsBe,GAAA,OAAAnB,EAAAoB,MAAA,KAAAC,UAAA,KAwBjBL,EAAc,eAAAM,GAAArB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAoB,EAAO1B,GAAW,IAAA2B,EAAAC,EAAAC,EAAA,OAAAxB,EAAAA,EAAAA,KAAAK,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OAUtC,MATgB,8DACXc,EAAU,CACdI,cAAc,UAADd,OAjCM,IAkCnB,eAAgB,oBAGZW,EAAO,CACXI,OAAQhC,EACRiC,WAAY,KACbH,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAGwBqB,EAAAA,EAAMC,KAZd,8DAY6BP,EAAM,CAAED,QAAAA,IAAW,KAAD,EACjB,OADvCE,EAAQC,EAAAV,KACdgB,QAAQC,IAAI,gBAAiBR,EAASD,MAAOE,EAAAQ,OAAA,SACtCT,EAASD,KAAKW,QAAQ,GAAGC,MAAI,QAGsB,OAHtBV,EAAAlB,KAAA,GAAAkB,EAAAW,GAAAX,EAAA,SAEpCM,QAAQM,MAAM,qCAAoCZ,EAAAW,IAClDL,QAAQC,IAAI,uBAAwBP,EAAAW,GAAMZ,SAASD,MAAOE,EAAAQ,OAAA,SACnD,uDAAqD,yBAAAR,EAAAT,OAAA,GAAAK,EAAA,mBAE/D,gBArBmBiB,GAAA,OAAAlB,EAAAF,MAAA,KAAAC,UAAA,KAuBxB,OACEoB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAC1BlD,EAAYoD,KAAI,SAACC,EAAKC,GAAK,OAC1BH,EAAAA,EAAAA,KAAA,OAAiBF,UAAS,WAAA5B,OAAagC,EAAIzD,QAASsD,SACjDG,EAAIxD,SADGyD,EAEJ,OAGVN,EAAAA,EAAAA,MAAA,QAAMO,SAAUjD,EAAmB2C,UAAU,aAAYC,SAAA,EACvDC,EAAAA,EAAAA,KAAA,SACEK,KAAK,OACLC,YAAY,uBACZC,MAAOtD,EACPuD,SAjEsB,SAAC/C,GACzBP,EAAeO,EAAEgD,OAAOF,MAC1B,KAiEEP,EAAAA,EAAAA,KAAA,UAAQK,KAAK,SAAQN,SAAC,cAI9B,C","sources":["components/bot/chatbot.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\"; // Import axios for API requests\r\nimport \"./chatbot.css\"; // ChatBot styles\r\n\r\n    const ChatBot = () => {\r\n      const [chatHistory, setChatHistory] = useState([\r\n        { sender: \"bot\", message: \"Hi there! How can I help you?\" },\r\n      ]);\r\n      const [userMessage, setUserMessage] = useState(\"\");\r\n      const OPENAI_API_KEY = \"\";\r\n    \r\n      const handleUserMessage = (e) => {\r\n        setUserMessage(e.target.value);\r\n      };\r\n    \r\n      const handleSendMessage = async (e) => {\r\n        e.preventDefault();\r\n        if (userMessage.trim() !== \"\") {\r\n          // Add user message to chat history\r\n          setChatHistory((prevChatHistory) => [\r\n            ...prevChatHistory,\r\n            { sender: \"user\", message: userMessage },\r\n          ]);\r\n      \r\n          // Send user message to GPT-3 API\r\n          const botResponse = await getBotResponse(userMessage);\r\n      \r\n          // Update chat history with bot's response\r\n          setChatHistory((prevChatHistory) => [\r\n            ...prevChatHistory,\r\n            { sender: \"bot\", message: botResponse },\r\n          ]);\r\n      \r\n          // Clear input field\r\n          setUserMessage(\"\");\r\n        }\r\n      };\r\n      \r\n    \r\n      const getBotResponse = async (userMessage) => {\r\n        const endpoint = \"https://api.openai.com/v1/engines/davinci-codex/completions\";\r\n        const headers = {\r\n          Authorization: `Bearer ${OPENAI_API_KEY}`,\r\n          \"Content-Type\": \"application/json\",\r\n        };\r\n    \r\n        const data = {\r\n          prompt: userMessage,\r\n          max_tokens: 100,\r\n        };\r\n    \r\n        try {\r\n          const response = await axios.post(endpoint, data, { headers });\r\n          console.log(\"API Response:\", response.data); // Debug logging\r\n          return response.data.choices[0].text;\r\n        } catch (error) {\r\n          console.error(\"Error processing the user message:\", error);\r\n          console.log(\"Error response data:\", error.response.data); // Log error response\r\n          return \"Oops, something went wrong. Please try again later.\";\r\n        }\r\n      };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chat-history\">\r\n        {chatHistory.map((msg, index) => (\r\n          <div key={index} className={`message ${msg.sender}`}>\r\n            {msg.message}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form onSubmit={handleSendMessage} className=\"user-input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type your message...\"\r\n          value={userMessage}\r\n          onChange={handleUserMessage}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n\r\n/*\r\n<li>\r\n                  <Link className=\"nav-link\" to=\"/chatbot\">\r\n                    ChatBot - In Progress\r\n                  </Link>\r\n                </li>\r\n                */"],"names":["_useState","useState","sender","message","_useState2","_slicedToArray","chatHistory","setChatHistory","_useState3","_useState4","userMessage","setUserMessage","handleSendMessage","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","botResponse","wrap","_context","prev","next","preventDefault","trim","prevChatHistory","concat","_toConsumableArray","getBotResponse","sent","stop","_x","apply","arguments","_ref2","_callee2","headers","data","response","_context2","Authorization","prompt","max_tokens","axios","post","console","log","abrupt","choices","text","t0","error","_x2","_jsxs","className","children","_jsx","map","msg","index","onSubmit","type","placeholder","value","onChange","target"],"sourceRoot":""}