{"version":3,"file":"static/js/320.016e5d66.chunk.js","mappings":"wJAIA,MA+EA,EA/EgBA,KACd,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,CAC7C,CAAEC,OAAQ,MAAOC,QAAS,oCAErBC,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,IACzCK,EAAiBC,CAAAA,SAAAA,aAAAA,WAAAA,mBAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,EAAAA,uBAAAA,2CAAAA,yBAAAA,sDAAAA,iCAAAA,oCAAYD,eA4B7BE,EAAiBC,UACrB,MAEMC,EAAU,CACdC,cAAc,UAADC,OAAYN,GACzB,eAAgB,oBAGZO,EAAO,CACXC,OAAQV,EACRW,WAAY,KAGd,IACE,MAAMC,QAAiBC,EAAAA,EAAMC,KAZ7B,8DAY4CL,EAAM,CAAEH,YAEpD,OADAS,QAAQC,IAAI,gBAAiBJ,EAASH,MAC/BG,EAASH,KAAKQ,QAAQ,GAAGC,IAClC,CAAE,MAAOC,GAGP,OAFAJ,QAAQI,MAAM,qCAAsCA,GACpDJ,QAAQC,IAAI,uBAAwBG,EAAMP,SAASH,MAC5C,qDACT,GAGF,OACEW,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAC1B3B,EAAY6B,KAAI,CAACC,EAAKC,KACrBH,EAAAA,EAAAA,KAAA,OAAiBF,UAAS,WAAAb,OAAaiB,EAAI3B,QAASwB,SACjDG,EAAI1B,SADG2B,QAKdN,EAAAA,EAAAA,MAAA,QAAMO,SAvDgBtB,UAExB,GADAuB,EAAEC,iBACyB,KAAvB7B,EAAY8B,OAAe,CAC7BlC,GAAgBmC,GAAoB,IAC/BA,EACH,CAAEjC,OAAQ,OAAQC,QAASC,MAI7B,MAAMgC,QAAoB5B,EAAeJ,GAGzCJ,GAAgBmC,GAAoB,IAC/BA,EACH,CAAEjC,OAAQ,MAAOC,QAASiC,MAI5B/B,EAAe,GACjB,GAoCqCoB,UAAU,aAAYC,SAAA,EACvDC,EAAAA,EAAAA,KAAA,SACEU,KAAK,OACLC,YAAY,uBACZC,MAAOnC,EACPoC,SAhEmBR,IACzB3B,EAAe2B,EAAES,OAAOF,MAAM,KAiE1BZ,EAAAA,EAAAA,KAAA,UAAQU,KAAK,SAAQX,SAAC,cAEpB,C","sources":["components/bot/chatbot.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\"; \r\nimport \"./chatbot.css\";\r\n\r\nconst ChatBot = () => {\r\n  const [chatHistory, setChatHistory] = useState([\r\n    { sender: \"bot\", message: \"Hi there! How can I help you?\" },\r\n  ]);\r\n  const [userMessage, setUserMessage] = useState(\"\");\r\n  const OPENAI_API_KEY = process.env.OPENAI_API_KEY;\r\n\r\n  const handleUserMessage = (e) => {\r\n    setUserMessage(e.target.value);\r\n  };\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (userMessage.trim() !== \"\") {\r\n      setChatHistory((prevChatHistory) => [\r\n        ...prevChatHistory,\r\n        { sender: \"user\", message: userMessage },\r\n      ]);\r\n\r\n      // Send user message to GPT-3 API\r\n      const botResponse = await getBotResponse(userMessage);\r\n\r\n      // Update chat history with bot's response\r\n      setChatHistory((prevChatHistory) => [\r\n        ...prevChatHistory,\r\n        { sender: \"bot\", message: botResponse },\r\n      ]);\r\n\r\n      // Clear input field\r\n      setUserMessage(\"\");\r\n    }\r\n  };\r\n\r\n  const getBotResponse = async (userMessage) => {\r\n    const endpoint =\r\n      \"https://api.openai.com/v1/engines/davinci-codex/completions\";\r\n    const headers = {\r\n      Authorization: `Bearer ${OPENAI_API_KEY}`,\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n\r\n    const data = {\r\n      prompt: userMessage,\r\n      max_tokens: 100,\r\n    };\r\n\r\n    try {\r\n      const response = await axios.post(endpoint, data, { headers });\r\n      console.log(\"API Response:\", response.data); // Debug logging\r\n      return response.data.choices[0].text;\r\n    } catch (error) {\r\n      console.error(\"Error processing the user message:\", error);\r\n      console.log(\"Error response data:\", error.response.data); // Log error response\r\n      return \"Oops, something went wrong. Please try again later.\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chat-history\">\r\n        {chatHistory.map((msg, index) => (\r\n          <div key={index} className={`message ${msg.sender}`}>\r\n            {msg.message}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form onSubmit={handleSendMessage} className=\"user-input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type your message...\"\r\n          value={userMessage}\r\n          onChange={handleUserMessage}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n"],"names":["ChatBot","chatHistory","setChatHistory","useState","sender","message","userMessage","setUserMessage","OPENAI_API_KEY","process","getBotResponse","async","headers","Authorization","concat","data","prompt","max_tokens","response","axios","post","console","log","choices","text","error","_jsxs","className","children","_jsx","map","msg","index","onSubmit","e","preventDefault","trim","prevChatHistory","botResponse","type","placeholder","value","onChange","target"],"sourceRoot":""}