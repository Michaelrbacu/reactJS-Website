{"version":3,"file":"static/js/53.5f4fdbd3.chunk.js","mappings":"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","sources":["components/nasa/nasa.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\nimport \"./nasa.css\";\r\n\r\nconst Nasa = () => {\r\n  // State variables for different data and settings\r\n  const [lightboxIndex, setLightboxIndex] = useState(0); // Index for the image lightbox\r\n  const [lightboxOpen, setLightboxOpen] = useState(false); // Flag to control the lightbox visibility\r\n  const [apodData, setApodData] = useState({}); // Astronomy Picture of the Day data\r\n  const [neoData, setNeoData] = useState([]); // Near Earth Objects data\r\n  const [marsRoverPhotos, setMarsRoverPhotos] = useState([]); // Mars Rover Photos data\r\n  const [exoplanetData, setExoplanetData] = useState([]); // Exoplanet Archive data\r\n  const [epicData, setEpicData] = useState([]); // Earth Polychromatic Imaging Camera (EPIC) data\r\n  const [insightData, setInsightData] = useState([]); // InSight Mars Lander data\r\n  const [eonetData, setEonetData] = useState([]); // Earth Observatory Natural Event Tracker (EONET) data\r\n  const [issLocation, setIssLocation] = useState({}); // International Space Station (ISS) Location data\r\n  const [keplerExoplanetData, setKeplerExoplanetData] = useState([]); // Kepler Exoplanet data\r\n  const [sdoData, setSdoData] = useState([]); // Solar Dynamics Observatory (SDO) data\r\n  const [donkiData, setDonkiData] = useState([]); // Space Weather Database of Notifications, Knowledge, Information (DONKI) data\r\n  const [geneLabData, setGeneLabData] = useState([]); // GeneLab data\r\n\r\n  // Current API being displayed\r\n  const [currentApi, setCurrentApi] = useState('apod');\r\n  \r\n  // List of available API endpoints\r\n  const apiEndpoints = [\r\n    'apod', 'neo', 'marsRoverPhotos', 'exoplanetData', 'epic',\r\n    'insightData', 'eonetData', 'issLocation', 'keplerExoplanetData',\r\n    'sdoData', 'donkiData', 'geneLabData'\r\n  ];\r\n\r\n  // Function to fetch data based on the selected API\r\n  const fetchData = (api) => {\r\n    switch (api) {\r\n      case 'apod':\r\n        // Fetch Astronomy Picture of the Day data\r\n        fetch(`https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_NASA_API_KEY}`)\r\n          .then(response => response.json())\r\n          .then(data => setApodData(data))\r\n          .catch(error => console.error('Error fetching APOD data:', error));\r\n        break;\r\n      // Add similar cases for other APIs\r\n      // ...\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Effect hook to fetch data when the selected API changes\r\n  useEffect(() => {\r\n    fetchData(currentApi);\r\n  }, [currentApi]);\r\n\r\n  // Handler to change the selected API\r\n  const handleApiChange = (api) => {\r\n    setCurrentApi(api);\r\n  };\r\n\r\n  // Handler to open the lightbox with a specific image\r\n  const handleLightboxOpen = (index) => {\r\n    setLightboxIndex(index);\r\n    setLightboxOpen(true);\r\n  };\r\n\r\n  // Handler to close the lightbox\r\n  const handleLightboxClose = () => {\r\n    setLightboxOpen(false);\r\n  };\r\n\r\n  // JSX code for rendering the component\r\n  return (\r\n    <div id=\"nasa-section\">\r\n      <h1>NASA API Features</h1>\r\n      <div className=\"api-list\">\r\n  <h2>Choose an API feature:</h2>\r\n  <ul>\r\n    {apiEndpoints.map(api => (\r\n      <li key={api}>\r\n        <button onClick={() => handleApiChange(api)}>{api}</button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n</div>\r\n\r\n            <div>\r\n            {currentApi === 'apod' && (\r\n        <div className=\"api-feature\">\r\n          <h2>Astronomy Picture of the Day</h2>\r\n          <div className=\"api-content\">\r\n\r\n            <div className=\"api-image\"> \r\n             <h1 className='apodtitle'>Title: {apodData.title}</h1>\r\n\r\n              <img src={apodData.url} alt={apodData.title} />\r\n            </div>\r\n            <div className=\"api-description\">\r\n              <p>Explanation: {apodData.explanation}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n        {currentApi === 'neo' && (\r\n          <div className=\"api-section\">\r\n          <h2>Near Earth Objects</h2>\r\n          <ul className=\"gallery\">\r\n              {neoData.near_earth_objects &&\r\n                neoData.near_earth_objects.map((item, index) => (\r\n                  <li key={index} className=\"neo-item\">\r\n                    <h3>Name: {item.name}</h3>\r\n                    <p>Reference ID: {item.neo_reference_id}</p>\r\n                    <p>Close Approach Date: {item.close_approach_data[0].close_approach_date}</p>\r\n                    <p>Miss Distance: {item.close_approach_data[0].miss_distance.kilometers} km</p>\r\n                    <p>Relative Velocity: {item.close_approach_data[0].relative_velocity.kilometers_per_hour} km/h</p>\r\n                  </li>\r\n                ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n\r\n\r\n\r\n{currentApi === 'marsRoverPhotos' && (\r\n  <div>\r\n    <h2>Mars Rover Photos</h2>\r\n    <ul className=\"gallery\">\r\n      {marsRoverPhotos.map((photo, index) => (\r\n        <li key={index} onClick={() => handleLightboxOpen(index)}>\r\n          <img src={photo.img_src} alt={`Mars Rover Photo ${index}`} />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n    {lightboxOpen && (\r\n      <Lightbox\r\n        mainSrc={marsRoverPhotos[lightboxIndex].img_src}\r\n        nextSrc={marsRoverPhotos[(lightboxIndex + 1) % marsRoverPhotos.length].img_src}\r\n        prevSrc={marsRoverPhotos[(lightboxIndex + marsRoverPhotos.length - 1) % marsRoverPhotos.length].img_src}\r\n        onCloseRequest={handleLightboxClose}\r\n        onMovePrevRequest={() => setLightboxIndex((lightboxIndex + marsRoverPhotos.length - 1) % marsRoverPhotos.length)}\r\n        onMoveNextRequest={() => setLightboxIndex((lightboxIndex + 1) % marsRoverPhotos.length)}\r\n      />\r\n    )}\r\n  </div>\r\n)}\r\n\r\n  {currentApi === 'exoplanetData' && (\r\n    <div>\r\n      <h2>Exoplanet Archive</h2>\r\n      <ul>\r\n        {exoplanetData.map((planet, index) => (\r\n          <li key={index}>{planet.pl_name}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )}\r\n{currentApi === 'epic' && (\r\n  <div>\r\n    <h2>Earth Polychromatic Imaging Camera (EPIC)</h2>\r\n    <ul className=\"gallery\">\r\n      {epicData.map((item, index) => (\r\n        <li key={index} onClick={() => handleLightboxOpen(index)}>\r\n          <img src={`https://epic.gsfc.nasa.gov/archive/natural/${item.date.split(' ')[0].replace(/-/g, '/')}/png/${item.image}.png`} alt={`EPIC ${item.date}`} />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n    {lightboxOpen && (\r\n      <Lightbox\r\n        mainSrc={`https://epic.gsfc.nasa.gov/archive/natural/${epicData[lightboxIndex].date.split(' ')[0].replace(/-/g, '/')}/png/${epicData[lightboxIndex].image}.png`}\r\n        nextSrc={`https://epic.gsfc.nasa.gov/archive/natural/${epicData[(lightboxIndex + 1) % epicData.length].date.split(' ')[0].replace(/-/g, '/')}/png/${epicData[(lightboxIndex + 1) % epicData.length].image}.png`}\r\n        prevSrc={`https://epic.gsfc.nasa.gov/archive/natural/${epicData[(lightboxIndex + epicData.length - 1) % epicData.length].date.split(' ')[0].replace(/-/g, '/')}/png/${epicData[(lightboxIndex + epicData.length - 1) % epicData.length].image}.png`}\r\n        onCloseRequest={handleLightboxClose}\r\n        onMovePrevRequest={() => setLightboxIndex((lightboxIndex + epicData.length - 1) % epicData.length)}\r\n        onMoveNextRequest={() => setLightboxIndex((lightboxIndex + 1) % epicData.length)}\r\n      />\r\n    )}\r\n  </div>\r\n)}\r\n\r\n{currentApi === 'insightData' && insightData && (\r\n  <div>\r\n    <h2>InSight Mars Lander Data</h2>\r\n    <p>Season: {insightData.season}</p>\r\n    <p>Average Temperature: {insightData.average_temp}</p>\r\n  </div>\r\n)}\r\n\r\n{currentApi === 'eonetData' && (\r\n  <div>\r\n    <h2>Earth Observatory Natural Event Tracker (EONET)</h2>\r\n    {eonetData && eonetData.length > 0 ? (\r\n      <ul>\r\n        {eonetData.map((event, index) => (\r\n          <li key={index}>\r\n            <p>Event Title: {event.title}</p>\r\n            <p>Category: {event.categories[0].title}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    ) : (\r\n      <p>No data available for this API.</p>\r\n    )}\r\n  </div>\r\n)}\r\n\r\n\r\n{currentApi === 'issLocation' && issLocation && (\r\n  <div>\r\n    <h2>International Space Station (ISS) Location</h2>\r\n    <p>Latitude: {issLocation.latitude}</p>\r\n    <p>Longitude: {issLocation.longitude}</p>\r\n  </div>\r\n)}\r\n\r\n{currentApi === 'keplerExoplanetData' && keplerExoplanetData && (\r\n  <div>\r\n    <h2>Kepler Exoplanet Data</h2>\r\n    <ul>\r\n      {keplerExoplanetData.map((planet, index) => (\r\n        <li key={index}>\r\n          <p>Planet Name: {planet.pl_name}</p>\r\n          <p>Discovery Method: {planet.pl_discmethod}</p>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n)}\r\n\r\n{currentApi === 'sdoData' && sdoData && (\r\n  <div>\r\n    <h2>Solar Dynamics Observatory (SDO) Data</h2>\r\n    <ul>\r\n      {sdoData.bodies.map((body, index) => (\r\n        <li key={index}>\r\n          <p>Body Name: {body.bodyName}</p>\r\n          <p>Body Type: {body.bodyType}</p>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n)}\r\n\r\n{currentApi === 'donkiData' && donkiData && (\r\n  <div>\r\n    <h2>Space Weather Database of Notifications, Knowledge, Information (DONKI)</h2>\r\n    <ul>\r\n      {donkiData.map((notification, index) => (\r\n        <li key={index}>\r\n          <p>Event Type: {notification.messageType}</p>\r\n          <p>Start Time: {notification.startTime}</p>\r\n          <p>End Time: {notification.endTime}</p>\r\n          <p>Activity ID: {notification.activityID}</p>\r\n          <p>Event Description: {notification.messageBody}</p>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n)}\r\n\r\n{currentApi === 'geneLabData' && geneLabData && (\r\n  <div>\r\n    <h2>GeneLab Data</h2>\r\n    <ul>\r\n      {geneLabData.map((gene, index) => (\r\n        <li key={index}>\r\n          <p>Gene Name: {gene.gene_name}</p>\r\n          <p>Organism: {gene.organism}</p>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n)}\r\n\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nasa;\r\n"],"names":["_useState","useState","_useState2","_slicedToArray","lightboxIndex","setLightboxIndex","_useState3","_useState4","lightboxOpen","setLightboxOpen","_useState5","_useState6","apodData","setApodData","_useState7","_useState8","neoData","_useState9","_useState10","marsRoverPhotos","_useState11","_useState12","exoplanetData","_useState13","_useState14","epicData","_useState15","_useState16","insightData","_useState17","_useState18","eonetData","_useState19","_useState20","issLocation","_useState21","_useState22","keplerExoplanetData","_useState23","_useState24","sdoData","_useState25","_useState26","donkiData","_useState27","_useState28","geneLabData","_useState29","_useState30","currentApi","setCurrentApi","useEffect","fetch","concat","process","then","response","json","data","catch","error","console","handleLightboxOpen","index","handleLightboxClose","_jsxs","id","children","_jsx","className","map","api","onClick","handleApiChange","title","src","url","alt","explanation","near_earth_objects","item","name","neo_reference_id","close_approach_data","close_approach_date","miss_distance","kilometers","relative_velocity","kilometers_per_hour","photo","img_src","Lightbox","mainSrc","nextSrc","length","prevSrc","onCloseRequest","onMovePrevRequest","onMoveNextRequest","planet","pl_name","date","split","replace","image","season","average_temp","event","categories","latitude","longitude","pl_discmethod","bodies","body","bodyName","bodyType","notification","messageType","startTime","endTime","activityID","messageBody","gene","gene_name","organism"],"sourceRoot":""}