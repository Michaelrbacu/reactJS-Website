{"version":3,"file":"static/js/403.6ac0b06a.chunk.js","mappings":"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","sources":["components/weather/Weather.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// OpenWeatherMap API configuration\r\nconst api = {\r\n  key: process.env.REACT_APP_OPENWEATHERMAP_API_KEY,\r\n  base: \"https://api.openweathermap.org/data/2.5/\",\r\n};\r\n\r\n// List of popular cities for the dropdown\r\nconst popularCities = [\r\n  \"Greer\",\r\n  \"London\",\r\n  \"New York\",\r\n  \"Paris\",\r\n  \"Tokyo\",\r\n  \"Sydney\",\r\n  \"Dubai\",\r\n  \"Moscow\",\r\n  \"Rio de Janeiro\",\r\n];\r\n\r\n// Weather component\r\nfunction Weather() {\r\n  // State variables\r\n  const [query, setQuery] = useState(\"\");\r\n  const [weather, setWeather] = useState({});\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n  // Function to fetch weather data based on the user's query\r\n  const search = () => {\r\n    setShowDropdown(false);\r\n    fetch(`${api.base}weather?q=${query}&appid=${api.key}&units=metric`)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        setWeather(result);\r\n        setQuery(\"\");\r\n        console.log(result);\r\n      });\r\n  };\r\n\r\n  // Function to handle key press events, triggering search on Enter\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      search();\r\n    }\r\n  };\r\n\r\n  // Function to handle input change in the search bar\r\n  const handleChange = (event) => {\r\n    setQuery(event.target.value);\r\n  };\r\n\r\n  // Function to handle click on a dropdown item\r\n  const handleDropdownClick = (city) => {\r\n    setQuery(city);\r\n    setShowDropdown(false);\r\n  };\r\n\r\n  // Function to format the date\r\n  const dateBuilder = (d) => {\r\n    let months = [\r\n      \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\r\n      \"August\", \"September\", \"October\", \"November\", \"December\",\r\n    ];\r\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day} ${date} ${month} ${year}`;\r\n  };\r\n\r\n  // Function to show the dropdown when the search bar is focused\r\n  const handleSearchBarFocus = () => {\r\n    setShowDropdown(true);\r\n  };\r\n\r\n  // Get the current time\r\n  var today = new Date();\r\n  var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n\r\n  // Render the Weather component\r\n  return (\r\n    <div\r\n      className={\r\n        typeof weather.main !== \"undefined\"\r\n          ? weather.main.temp > 16\r\n            ? \"app warm\"\r\n            : \"app\"\r\n          : \"app\"\r\n      }\r\n    >\r\n      <main>\r\n        <div className=\"search-box\">\r\n          <div className=\"search-bar-container\">\r\n            {/* Input for searching */}\r\n            <input\r\n              type=\"text\"\r\n              className=\"search-bar\"\r\n              placeholder=\"Search...\"\r\n              onChange={handleChange}\r\n              value={query}\r\n              onKeyDown={handleKeyPress}\r\n              onFocus={handleSearchBarFocus}\r\n            />\r\n            <div className=\"header-bar\">\r\n              {/* Button to trigger search */}\r\n              <button className=\"search-button\" onClick={search}>\r\n                Search\r\n              </button>\r\n            </div>\r\n          </div>\r\n          {showDropdown && (\r\n            // Dropdown menu for popular cities\r\n            <div className=\"dropdown\">\r\n              {popularCities.map((city, index) => (\r\n                <div\r\n                  key={index}\r\n                  className=\"dropdown-item\"\r\n                  onClick={() => handleDropdownClick(city)}\r\n                >\r\n                  {city}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n        {typeof weather.main !== \"undefined\" ? (\r\n          <div className=\"top-left\">\r\n            {/* Location and date */}\r\n            <div className=\"location-box\">\r\n              <div className=\"location\">\r\n                {weather.name}, {weather.sys.country}\r\n              </div>\r\n              <div className=\"date\">{dateBuilder(new Date()) + \" \" + time}</div>\r\n            </div>\r\n            {/* Temperature */}\r\n            <div className=\"weather-box\">\r\n              <div className=\"temp\">\r\n                {Math.round(weather.main.temp)}°C\r\n                <br></br>\r\n                {Math.round(weather.main.temp * (9 / 5) + 32)}°F\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"bottom-row\">\r\n              {/* Weather description */}\r\n              <div className=\"weather-box2\">\r\n                <div>{weather.weather[0].description}</div>\r\n              </div>\r\n              {/* Humidity and Cloudiness */}\r\n              <div className=\"weather-box2\">\r\n                <div>\r\n                  Humidity: {weather.main.humidity} &nbsp; &nbsp; Cloudiness:{\" \"}\r\n                  {weather.clouds.all}%\r\n                </div>\r\n              </div>\r\n              {/* Wind Speed and Wind Direction */}\r\n              <div className=\"weather-box2\">\r\n                <div>\r\n                  Wind Speed: {weather.wind.speed} &nbsp; &nbsp; Wind Direction:{\" \"}\r\n                  {weather.wind.deg}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </main>\r\n\r\n      <div></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n"],"names":["api","process","popularCities","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","weather","setWeather","_useState5","_useState6","showDropdown","setShowDropdown","search","fetch","concat","then","res","json","result","console","log","today","Date","time","getHours","getMinutes","getSeconds","_jsxs","className","main","temp","children","_jsx","type","placeholder","onChange","event","target","value","onKeyDown","key","onFocus","onClick","map","city","index","handleDropdownClick","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Math","round","description","humidity","clouds","all","wind","speed","deg"],"sourceRoot":""}